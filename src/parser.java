
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 02 18:15:23 VET 2014
//----------------------------------------------------

import AST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 02 18:15:23 VET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\030\002\000\002\002\005\000\002\002" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\003" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\025\003\000\002\025\005\000\002" +
    "\026\005\000\002\026\003\000\002\006\006\000\002\006" +
    "\007\000\002\011\005\000\002\011\003\000\002\012\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\007\005\000\002\007\011\000\002\010\003\000\002\010" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\022\004\000" +
    "\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\005\014\010\004\011\013\030\005\001" +
    "\002\000\020\005\063\006\073\007\064\010\004\011\013" +
    "\030\065\034\062\001\002\000\012\005\014\010\004\011" +
    "\013\030\005\001\002\000\014\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\026\001\001\002\000\042\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\001\002\000\042\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\001\002" +
    "\000\042\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\001\002\000\004\002" +
    "\044\001\002\000\004\005\032\001\002\000\044\005\031" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\001\002\000\012\012\021\013" +
    "\020\014\025\015\026\001\002\000\042\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\001\002\000\042\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\001" +
    "\002\000\012\005\uffe1\010\uffe1\011\uffe1\030\uffe1\001\002" +
    "\000\012\005\uffe4\010\uffe4\011\uffe4\030\uffe4\001\002\000" +
    "\012\005\uffe0\010\uffe0\011\uffe0\030\uffe0\001\002\000\012" +
    "\005\uffe2\010\uffe2\011\uffe2\030\uffe2\001\002\000\012\005" +
    "\014\010\004\011\013\030\005\001\002\000\012\005\uffdf" +
    "\010\uffdf\011\uffdf\030\uffdf\001\002\000\012\005\uffe3\010" +
    "\uffe3\011\uffe3\030\uffe3\001\002\000\042\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\001\002\000\042\012\021\013\020\014\025\015" +
    "\026\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\001" +
    "\002\000\042\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\001\002\000\010" +
    "\030\ufff4\032\ufff4\033\042\001\002\000\004\030\037\001" +
    "\002\000\006\030\ufff7\032\035\001\002\000\004\005\032" +
    "\001\002\000\004\030\ufff6\001\002\000\012\005\014\010" +
    "\004\011\013\030\005\001\002\000\014\012\021\013\020" +
    "\014\025\015\026\031\041\001\002\000\042\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\001\002\000\004\005\043\001\002\000\030" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\030\ufff5\032\ufff5\001\002\000\004" +
    "\002\uffff\001\002\000\004\026\046\001\002\000\004\002" +
    "\000\001\002\000\014\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\031\060\001\002\000\014\012\021\013\020\014\025\015" +
    "\026\031\053\001\002\000\014\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\031\052\001\002\000\042\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\001\002\000\012\012\021\013\020\014\025\015\026" +
    "\001\002\000\004\030\055\001\002\000\012\005\014\010" +
    "\004\011\013\030\005\001\002\000\014\012\021\013\020" +
    "\014\025\015\026\031\057\001\002\000\042\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\001\002\000\042\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\001\002\000\026\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\027\uffed\030\uffed\001\002" +
    "\000\026\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\027\uffea\030\uffea\001\002\000\042" +
    "\005\031\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\027\ufff4\030\ufff4\033\042\001\002\000\026\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\027\uffe9\030\uffe9\001\002\000\012\005\014\010\004\011" +
    "\013\030\005\001\002\000\016\021\110\022\114\023\111" +
    "\024\107\025\106\027\112\001\002\000\026\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\027\uffee\030\uffee\001\002\000\036\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\027\uffec\030\uffec\001\002\000" +
    "\012\016\ufff0\017\ufff0\020\ufff0\030\ufff0\001\002\000\012" +
    "\016\077\017\102\020\076\030\101\001\002\000\026\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\027\uffeb\030\uffeb\001\002\000\020\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\030\uffdb\034\uffdb\001\002" +
    "\000\020\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\030" +
    "\uffdd\034\uffdd\001\002\000\020\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\030\uffda\034\uffda\001\002\000\020\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\030\uffdc\034\uffdc" +
    "\001\002\000\020\005\063\006\073\007\064\010\004\011" +
    "\013\030\005\034\062\001\002\000\012\005\014\010\004" +
    "\011\013\030\005\001\002\000\020\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\030\uffde\034\uffde\001\002\000\014" +
    "\012\021\013\020\014\025\015\026\031\104\001\002\000" +
    "\042\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\001\002\000\012\016\077" +
    "\017\102\020\076\030\ufff1\001\002\000\020\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\030\uffd4\034\uffd4\001\002" +
    "\000\020\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\030" +
    "\uffd5\034\uffd5\001\002\000\020\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\030\uffd9\034\uffd9\001\002\000\020\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\030\uffd6\034\uffd6" +
    "\001\002\000\020\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\030\uffd3\034\uffd3\001\002\000\020\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\030\uffd7\034\uffd7\001\002\000" +
    "\020\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\030\uffd8" +
    "\034\uffd8\001\002\000\020\005\063\006\073\007\064\010" +
    "\004\011\013\030\005\034\062\001\002\000\012\016\uffef" +
    "\017\uffef\020\uffef\030\uffef\001\002\000\014\012\021\013" +
    "\020\014\025\015\026\031\120\001\002\000\042\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\022\002\011\003\005\004\015\005\010\006" +
    "\007\007\006\010\014\022\016\001\001\000\032\003\067" +
    "\004\015\005\010\006\007\007\006\010\014\011\071\012" +
    "\070\013\065\022\016\026\060\027\066\001\001\000\020" +
    "\003\026\004\050\005\010\006\007\007\046\010\047\022" +
    "\016\001\001\000\004\030\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\032\026\033\001\001\000\002\001\001\000\010" +
    "\014\023\015\022\016\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\026\004\015\005" +
    "\010\006\007\007\006\010\027\022\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\023\015\022\016\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\035\026\033\001\001\000\002\001\001\000\020\003\026" +
    "\004\015\005\010\006\007\007\006\010\037\022\016\001" +
    "\001\000\010\014\023\015\022\016\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\023\015\022\016\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\053\015\022\016\021" +
    "\001\001\000\002\001\001\000\020\003\026\004\015\005" +
    "\010\006\007\007\006\010\055\022\016\001\001\000\010" +
    "\014\023\015\022\016\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\026\004\050\005" +
    "\010\006\007\007\046\010\116\022\016\001\001\000\006" +
    "\023\114\024\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\077\020\074\021\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\067" +
    "\004\015\005\010\006\007\007\006\010\014\011\104\012" +
    "\070\013\065\022\016\026\060\027\066\001\001\000\020" +
    "\003\026\004\015\005\010\006\007\007\006\010\102\022" +
    "\016\001\001\000\002\001\001\000\010\014\023\015\022" +
    "\016\021\001\001\000\002\001\001\000\010\017\077\020" +
    "\074\021\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\067\004\015" +
    "\005\010\006\007\007\006\010\014\013\115\022\016\026" +
    "\060\027\066\001\001\000\002\001\001\000\010\014\023" +
    "\015\022\016\021\001\001\000\010\014\053\015\022\016" +
    "\021\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tabla_nombre ::= Palabra 
            {
              NodoTabla RESULT =null;
		int nombleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoTabla(nomb);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tabla_nombre",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tabla_nombre ::= Palabra Palabra 
            {
              NodoTabla RESULT =null;
		int nombleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	 	RESULT = new NodoTabla(nomb,alias);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tabla_nombre",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Simbolo_2 ::= Menorq 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoSimbol("Menorq");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Simbolo_2 ::= Mayorq 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoSimbol("Mayorq");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Simbolo_2 ::= Menor 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoSimbol("Menor");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Simbolo_2 ::= Mayor 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoSimbol("Mayor");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Simbolo_1 ::= Simbolo_2 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSimbol v = (NodoSimbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Simbolo_1 ::= Diferente 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoSimbol("Diferente");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Simbolo_1 ::= Eq 
            {
              NodoSimbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoSimbol("Eq");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Simbolo_1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Opc_Logica_3 ::= Not 
            {
              NodoOperacionLogica RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacionLogica("Not");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Opc_Logica_3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Opc_Logica_2 ::= Opc_Logica_3 
            {
              NodoOperacionLogica RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoOperacionLogica v = (NodoOperacionLogica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Opc_Logica_2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Opc_Logica_2 ::= And 
            {
              NodoOperacionLogica RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacionLogica("And");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Opc_Logica_2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Opc_Logica_1 ::= Opc_Logica_2 
            {
              NodoOperacionLogica RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoOperacionLogica v = (NodoOperacionLogica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Opc_Logica_1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Opc_Logica_1 ::= Or 
            {
              NodoOperacionLogica RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacionLogica("Or");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Opc_Logica_1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Operacion_3 ::= Proc 
            {
              NodoOperacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacion("Proc");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Operacion_2 ::= Operacion_3 
            {
              NodoOperacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoOperacion v = (NodoOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Operacion_2 ::= Dif 
            {
              NodoOperacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacion("Dif");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Operacion_1 ::= Operacion_2 
            {
              NodoOperacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoOperacion v = (NodoOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operacion_1 ::= Int 
            {
              NodoOperacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacion("Int");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operacion_1 ::= Uni 
            {
              NodoOperacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new NodoOperacion("Uni");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion_1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tabla ::= Exp 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	 	RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tabla",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tabla ::= Tabla_nombre 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoTabla v = (NodoTabla)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tabla",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencia3 ::= ParentI Tabla ParentD Operacion_1 ParentI Tabla ParentD 
            {
              NodoBase RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase pri = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoOperacion op = (NodoOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int secleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int secright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		op.Set_Izq(pri);
		op.Set_Der(sec);
		
		RESULT = op;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia3 ::= Tabla Operacion_1 Tabla 
            {
              NodoBase RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pri = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOperacion op = (NodoOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		op.Set_Izq(pri);
		op.Set_Der(sec);
		
		RESULT = op;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Valor ::= Fecha 
            {
              NodoValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	 	RESULT = new NodoValor (v , 3);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Valor ::= Numero 
            {
              NodoValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	 	RESULT = new NodoValor ( v, 2);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Valor ::= Caracter 
            {
              NodoValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
	 	RESULT =new NodoValor ( v, 1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo_Filtro ::= Exp 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Filtro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo_Filtro ::= Columna 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoColumna v = (NodoColumna)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Filtro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo_Filtro ::= Valor 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoValor v = (NodoValor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo_Filtro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Filtro_tipo_2 ::= Tipo_Filtro Simbolo_1 Tipo_Filtro 
            {
              NodoBase RESULT =null;
		int obj1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int obj1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase obj1 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoSimbol simbol = (NodoSimbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int obj2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int obj2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase obj2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		simbol.set_valor1(obj1);
		simbol.set_valor2(obj2);
		
		RESULT = simbol;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Filtro_tipo_2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Filtro_tipo_1 ::= Filtro_tipo_2 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT =v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Filtro_tipo_1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Filtro_tipo_1 ::= Filtro_tipo_1 Opc_Logica_1 Filtro_tipo_1 
            {
              NodoBase RESULT =null;
		int fil1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fil1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase fil1 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opc_logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opc_logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOperacionLogica opc_log = (NodoOperacionLogica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fil2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fil2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fil2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	 opc_log.set_Izq(fil1);
	 
	 opc_log.set_Der(fil2);
	 
	 RESULT = opc_log;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Filtro_tipo_1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia2 ::= Sel Filtro_tipo_1 ParentI Tabla ParentD 
            {
              NodoSel RESULT =null;
		int filtroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int filtroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase filtro = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tabla = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT =new NodoSel(tabla,filtro);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia2 ::= Sel ParentI Tabla ParentD 
            {
              NodoSel RESULT =null;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tabla = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	
		
	 	RESULT = new NodoSel(tabla);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Columna ::= Palabra 
            {
              NodoColumna RESULT =null;
		int columnaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int columnaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String columna = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new	NodoColumna(columna);	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Columna",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Columna ::= Palabra Punto Palabra 
            {
              NodoColumna RESULT =null;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tabla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int columnaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int columnaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String columna = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new 	NodoColumna(tabla,columna);	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Columna",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Argumento ::= Columna Coma Argumento 
            {
              NodoArgumento RESULT =null;
		int columnaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int columnaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoColumna columna = (NodoColumna)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArgumento arg = (NodoArgumento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		NodoArgumento  a = new NodoArgumento(columna);
	 
	 	a.set_hijo(arg);
	 	RESULT = a;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Argumento",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Argumento ::= Columna 
            {
              NodoArgumento RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoColumna v = (NodoColumna)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
	 	RESULT = new NodoArgumento(v);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Argumento",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia1 ::= Pro Argumento ParentI Tabla ParentD 
            {
              NodoPro RESULT =null;
		int Argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoArgumento Arg = (NodoArgumento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tabla = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	
	 	RESULT =  new NodoPro(tabla,  Arg);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp2 ::= Sentencia2 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSel v = (NodoSel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp2 ::= Sentencia1 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoPro v = (NodoPro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp ::= ParentI Exp2 ParentD 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
			RESULT = v;
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp ::= Exp2 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
			RESULT = v;
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp ::= ParentI Sentencia3 ParentD 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
			RESULT = v;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= Sentencia3 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
			RESULT = v;
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= Exp NT$0 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		new lectura(v);
		
		System.out.println("ASt creado correctamente");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

